/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cz.muni.fi.sdipr.kafka.latency.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Payload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6271146144368959286L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payload\",\"namespace\":\"cz.muni.fi.sdipr.kafka.latency.avro\",\"fields\":[{\"name\":\"payload\",\"type\":\"string\"},{\"name\":\"producer_time\",\"type\":\"long\"},{\"name\":\"consumer_time\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payload> ENCODER =
      new BinaryMessageEncoder<Payload>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payload> DECODER =
      new BinaryMessageDecoder<Payload>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Payload> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Payload> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Payload>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Payload to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Payload from a ByteBuffer. */
  public static Payload fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence payload;
  @Deprecated public long producer_time;
  @Deprecated public long consumer_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payload() {}

  /**
   * All-args constructor.
   * @param payload The new value for payload
   * @param producer_time The new value for producer_time
   * @param consumer_time The new value for consumer_time
   */
  public Payload(java.lang.CharSequence payload, java.lang.Long producer_time, java.lang.Long consumer_time) {
    this.payload = payload;
    this.producer_time = producer_time;
    this.consumer_time = consumer_time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payload;
    case 1: return producer_time;
    case 2: return consumer_time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payload = (java.lang.CharSequence)value$; break;
    case 1: producer_time = (java.lang.Long)value$; break;
    case 2: consumer_time = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.CharSequence getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.CharSequence value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'producer_time' field.
   * @return The value of the 'producer_time' field.
   */
  public java.lang.Long getProducerTime() {
    return producer_time;
  }

  /**
   * Sets the value of the 'producer_time' field.
   * @param value the value to set.
   */
  public void setProducerTime(java.lang.Long value) {
    this.producer_time = value;
  }

  /**
   * Gets the value of the 'consumer_time' field.
   * @return The value of the 'consumer_time' field.
   */
  public java.lang.Long getConsumerTime() {
    return consumer_time;
  }

  /**
   * Sets the value of the 'consumer_time' field.
   * @param value the value to set.
   */
  public void setConsumerTime(java.lang.Long value) {
    this.consumer_time = value;
  }

  /**
   * Creates a new Payload RecordBuilder.
   * @return A new Payload RecordBuilder
   */
  public static cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder newBuilder() {
    return new cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder();
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payload RecordBuilder
   */
  public static cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder newBuilder(cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder other) {
    return new cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder(other);
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Payload instance.
   * @param other The existing instance to copy.
   * @return A new Payload RecordBuilder
   */
  public static cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder newBuilder(cz.muni.fi.sdipr.kafka.latency.avro.Payload other) {
    return new cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder(other);
  }

  /**
   * RecordBuilder for Payload instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payload>
    implements org.apache.avro.data.RecordBuilder<Payload> {

    private java.lang.CharSequence payload;
    private long producer_time;
    private long consumer_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.producer_time)) {
        this.producer_time = data().deepCopy(fields()[1].schema(), other.producer_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.consumer_time)) {
        this.consumer_time = data().deepCopy(fields()[2].schema(), other.consumer_time);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Payload instance
     * @param other The existing instance to copy.
     */
    private Builder(cz.muni.fi.sdipr.kafka.latency.avro.Payload other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.payload)) {
        this.payload = data().deepCopy(fields()[0].schema(), other.payload);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.producer_time)) {
        this.producer_time = data().deepCopy(fields()[1].schema(), other.producer_time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.consumer_time)) {
        this.consumer_time = data().deepCopy(fields()[2].schema(), other.consumer_time);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder setPayload(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.payload = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'producer_time' field.
      * @return The value.
      */
    public java.lang.Long getProducerTime() {
      return producer_time;
    }

    /**
      * Sets the value of the 'producer_time' field.
      * @param value The value of 'producer_time'.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder setProducerTime(long value) {
      validate(fields()[1], value);
      this.producer_time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'producer_time' field has been set.
      * @return True if the 'producer_time' field has been set, false otherwise.
      */
    public boolean hasProducerTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'producer_time' field.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder clearProducerTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'consumer_time' field.
      * @return The value.
      */
    public java.lang.Long getConsumerTime() {
      return consumer_time;
    }

    /**
      * Sets the value of the 'consumer_time' field.
      * @param value The value of 'consumer_time'.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder setConsumerTime(long value) {
      validate(fields()[2], value);
      this.consumer_time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'consumer_time' field has been set.
      * @return True if the 'consumer_time' field has been set, false otherwise.
      */
    public boolean hasConsumerTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'consumer_time' field.
      * @return This builder.
      */
    public cz.muni.fi.sdipr.kafka.latency.avro.Payload.Builder clearConsumerTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payload build() {
      try {
        Payload record = new Payload();
        record.payload = fieldSetFlags()[0] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.producer_time = fieldSetFlags()[1] ? this.producer_time : (java.lang.Long) defaultValue(fields()[1]);
        record.consumer_time = fieldSetFlags()[2] ? this.consumer_time : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payload>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payload>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payload>
    READER$ = (org.apache.avro.io.DatumReader<Payload>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
